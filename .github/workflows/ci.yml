name: ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        # TODO(ry): reenable canary when on-going builds in deno repo do not
        # result in red builds in std.
        deno: [1.x] # [1.x, canary]
        os: [macOS-latest, ubuntu-latest, windows-2019]

    steps:
      - name: Clone repository
        uses: actions/checkout@v2
        with:
          submodules: true
          persist-credentials: false

      - name: Set up Deno
        uses: denoland/setup-deno@v1.0.0
        with:
          deno-version: ${{ matrix.deno }}

      - name: Run tests
        run: deno test --unstable --allow-all

      - name: Type check browser compatible modules
        shell: bash
        run: |
          git grep --name-only "// This module is browser compatible." | grep -v ".github/workflows" | xargs deno cache --config browser-compat.tsconfig.json

      - name: Generate lcov
        run: deno coverage --unstable --lcov ./cov > cov.lcov

      - name: Upload coverage
        uses: codecov/codecov-action@v1
        with:
          name: ${{ matrix.os }}-${{ matrix.deno }}
          files: cov.lcov

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
        with:
          submodules: false
          persist-credentials: false

      - name: Set up Deno
        uses: denoland/setup-deno@v1.0.0

      - name: Format
        run: deno fmt --check

      - name: Lint
        run: deno lint

  hash-wasm:
    name: "hash/_wasm/"
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
        with:
          # required to check for changes
          fetch-depth: 2
          submodules: false
          persist-credentials: false

      - name: Check for changes to hash/_wasm/
        id: source
        run: |-
          set -o errexit
          shopt -s inherit_errexit
          declare modifications="$(git diff --name-only HEAD~ -- ./_wasm_crypto)"
          declare modified="$([[ "$modifications" ]] && echo true || echo false)"
          echo "::set-output name=modified::$modified"
          echo "Hash source modified in this commit? $modified"
          echo "$modifications"

      - name: Set up Deno
        uses: denoland/setup-deno@v1.0.0
        if: success() && steps.source.outputs.modified == 'true'

      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
        if: success() && steps.source.outputs.modified == 'true'
        with:
          # This must match the version in hash/_wasm/rust-toolchain:
          rust-version: 1.53.0
          targets: wasm32-unknown-unknown
          components: rustfmt

      - name: Set up wasm-bindgen-cli
        run: |-
          # This must match the version in hash/_wasm/Cargo.lock:
          cargo install -f wasm-bindgen-cli --version 0.2.74
        if: success() && steps.source.outputs.modified == 'true'

      - name: Rebuild WASM and verify it's unchanged
        id: build
        if: success() && steps.source.outputs.modified == 'true'
        run: |-
          ./_wasm_crypto/_build.ts

          set -o errexit
          shopt -s inherit_errexit
          declare modifications="$(git status --porcelain)"
          declare modified="$([[ "$(git status --porcelain)" ]] && echo true || echo false)"
          echo "::set-output name=modified::$modified"
          echo "Generated code modified? $modified"
          echo "$modifications"

          if [[ "$modified" = "true" ]]; then
            echo "::error ::Rebuilt WASM doesn't match committed WASM. Please rebuild and commit."
            exit 1
          fi
